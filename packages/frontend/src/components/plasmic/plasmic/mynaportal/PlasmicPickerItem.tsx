// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3JWqxZzoKRrJsc2DDFbDv6
// Component: ZyV-MW8MdOs7

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: tNzsSEy0iSL1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3JWqxZzoKRrJsc2DDFbDv6/projectcss
import sty from "./PlasmicPickerItem.module.css"; // plasmic-import: ZyV-MW8MdOs7/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 47BG9Q3TerEV/icon
import TrashSvgrepoComSvgIcon from "./icons/PlasmicIcon__TrashSvgrepoComSvg"; // plasmic-import: JGPWjENQbDTF/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: RchQe3XNEc5s/icon

createPlasmicElementProxy;

export type PlasmicPickerItem__VariantMembers = {};
export type PlasmicPickerItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicPickerItem__VariantsArgs;
export const PlasmicPickerItem__VariantProps = new Array<VariantPropType>();

export type PlasmicPickerItem__ArgsType = {
  title?: React.ReactNode;
  onRemove?: () => void;
  subtitle?: React.ReactNode;
};
type ArgPropType = keyof PlasmicPickerItem__ArgsType;
export const PlasmicPickerItem__ArgProps = new Array<ArgPropType>(
  "title",
  "onRemove",
  "subtitle"
);

export type PlasmicPickerItem__OverridesType = {
  root?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
  text?: Flex__<"div">;
};

export interface DefaultPickerItemProps {
  title?: React.ReactNode;
  onRemove?: () => void;
  subtitle?: React.ReactNode;
  className?: string;
}

const $$ = {};

function PlasmicPickerItem__RenderFunc(props: {
  variants: PlasmicPickerItem__VariantsArgs;
  args: PlasmicPickerItem__ArgsType;
  overrides: PlasmicPickerItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__aMu8U)}>
        <div className={classNames(projectcss.all, sty.freeBox__a4K9R)}>
          {renderPlasmicSlot({
            defaultContents: "\u591a\u7cfb\u7d71\u840e\u7e2e\u75c7",
            value: args.title
          })}
          {renderPlasmicSlot({
            defaultContents: "\u56fd\u6307\u5b9a \u75be\u75c5\u756a\u53f7: 123",
            value: args.subtitle,
            className: classNames(sty.slotTargetSubtitle)
          })}
        </div>
        <Button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
          color={"softRed"}
          onClick={async event => {
            const $steps = {};

            $steps["runOnRemove"] = true
              ? (() => {
                  const actionArgs = { eventRef: $props["onRemove"] };
                  return (({ eventRef, args }) => {
                    return eventRef?.(...(args ?? []));
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["runOnRemove"] != null &&
              typeof $steps["runOnRemove"] === "object" &&
              typeof $steps["runOnRemove"].then === "function"
            ) {
              $steps["runOnRemove"] = await $steps["runOnRemove"];
            }
          }}
          shape={"rounded"}
          size={"compact"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__h5Md)}
          >
            <TrashSvgrepoComSvgIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"\u524a\u9664"}
            </div>
          </Stack__>
        </Button>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button", "svg", "text"],
  button: ["button", "svg", "text"],
  svg: ["svg"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
  svg: "svg";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPickerItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPickerItem__VariantsArgs;
    args?: PlasmicPickerItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPickerItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPickerItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPickerItem__ArgProps,
          internalVariantPropNames: PlasmicPickerItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPickerItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPickerItem";
  } else {
    func.displayName = `PlasmicPickerItem.${nodeName}`;
  }
  return func;
}

export const PlasmicPickerItem = Object.assign(
  // Top-level PlasmicPickerItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicPickerItem
    internalVariantProps: PlasmicPickerItem__VariantProps,
    internalArgProps: PlasmicPickerItem__ArgProps
  }
);

export default PlasmicPickerItem;
/* prettier-ignore-end */
