// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3JWqxZzoKRrJsc2DDFbDv6
// Component: 1PHBjj-cdUhJ

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Step from "../../Step"; // plasmic-import: LQXP4Xk-Q5Fs/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3JWqxZzoKRrJsc2DDFbDv6/projectcss
import sty from "./PlasmicStepsBase.module.css"; // plasmic-import: 1PHBjj-cdUhJ/css

createPlasmicElementProxy;

export type PlasmicStepsBase__VariantMembers = {};
export type PlasmicStepsBase__VariantsArgs = {};
type VariantPropType = keyof PlasmicStepsBase__VariantsArgs;
export const PlasmicStepsBase__VariantProps = new Array<VariantPropType>();

export type PlasmicStepsBase__ArgsType = { currentStep?: number; value?: any };
type ArgPropType = keyof PlasmicStepsBase__ArgsType;
export const PlasmicStepsBase__ArgProps = new Array<ArgPropType>(
  "currentStep",
  "value"
);

export type PlasmicStepsBase__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  step?: Flex__<typeof Step>;
};

export interface DefaultStepsBaseProps {
  currentStep?: number;
  value?: any;
  className?: string;
}

const $$ = {};

function PlasmicStepsBase__RenderFunc(props: {
  variants: PlasmicStepsBase__VariantsArgs;
  args: PlasmicStepsBase__ArgsType;
  overrides: PlasmicStepsBase__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "inlineScrollable"
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $props.value;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <Step
              data-plasmic-name={"step"}
              data-plasmic-override={overrides.step}
              active={(() => {
                try {
                  return $props.currentStep == currentIndex + 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              className={classNames("__wab_instance", sty.step)}
              key={currentIndex}
              step={(() => {
                try {
                  return currentIndex + 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 1;
                  }
                  throw e;
                }
              })()}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u767b\u9332\u3055\u308c\u305f\u60c5\u5831\u306e\u78ba\u8a8d";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </Step>
          );
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "step"],
  freeBox: ["freeBox", "step"],
  step: ["step"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  step: typeof Step;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicStepsBase__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicStepsBase__VariantsArgs;
    args?: PlasmicStepsBase__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicStepsBase__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicStepsBase__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicStepsBase__ArgProps,
          internalVariantPropNames: PlasmicStepsBase__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicStepsBase__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicStepsBase";
  } else {
    func.displayName = `PlasmicStepsBase.${nodeName}`;
  }
  return func;
}

export const PlasmicStepsBase = Object.assign(
  // Top-level PlasmicStepsBase renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    step: makeNodeComponent("step"),

    // Metadata about props expected for PlasmicStepsBase
    internalVariantProps: PlasmicStepsBase__VariantProps,
    internalArgProps: PlasmicStepsBase__ArgProps
  }
);

export default PlasmicStepsBase;
/* prettier-ignore-end */
