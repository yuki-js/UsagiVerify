// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3JWqxZzoKRrJsc2DDFbDv6
// Component: 3mUqgmjQCo0V

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import PickerItem from "../../PickerItem"; // plasmic-import: ZyV-MW8MdOs7/component
import Button from "../../Button"; // plasmic-import: tNzsSEy0iSL1/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3JWqxZzoKRrJsc2DDFbDv6/projectcss
import sty from "./PlasmicPicker.module.css"; // plasmic-import: 3mUqgmjQCo0V/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 47BG9Q3TerEV/icon
import Add24DpFill0Wght400Grad0Opsz24SvgIcon from "./icons/PlasmicIcon__Add24DpFill0Wght400Grad0Opsz24Svg"; // plasmic-import: fMSl89bn8sPy/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: RchQe3XNEc5s/icon

createPlasmicElementProxy;

export type PlasmicPicker__VariantMembers = {};
export type PlasmicPicker__VariantsArgs = {};
type VariantPropType = keyof PlasmicPicker__VariantsArgs;
export const PlasmicPicker__VariantProps = new Array<VariantPropType>();

export type PlasmicPicker__ArgsType = {
  filterer?: (item: any) => void;
  items?: any;
  label?: string;
  placeholder?: string;
  onChange?: (selected: any) => void;
  selected?: any;
};
type ArgPropType = keyof PlasmicPicker__ArgsType;
export const PlasmicPicker__ArgProps = new Array<ArgPropType>(
  "filterer",
  "items",
  "label",
  "placeholder",
  "onChange",
  "selected"
);

export type PlasmicPicker__OverridesType = {
  root?: Flex__<"div">;
  pickerItem?: Flex__<typeof PickerItem>;
  inputArea?: Flex__<"div">;
  add?: Flex__<typeof Button>;
  svg?: Flex__<"svg">;
};

export interface DefaultPickerProps {
  filterer?: (item: any) => void;
  items?: any;
  label?: string;
  placeholder?: string;
  onChange?: (selected: any) => void;
  selected?: any;
  className?: string;
}

const $$ = {};

function PlasmicPicker__RenderFunc(props: {
  variants: PlasmicPicker__VariantsArgs;
  args: PlasmicPicker__ArgsType;
  overrides: PlasmicPicker__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          items: [],
          selected: []
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $props.selected.map(e => $props.items.find(i => i.id === e));
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <PickerItem
            data-plasmic-name={"pickerItem"}
            data-plasmic-override={overrides.pickerItem}
            className={classNames("__wab_instance", sty.pickerItem)}
            key={currentIndex}
            onRemove={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $props.onChange(
                          $props.selected.filter(e => e !== currentItem.id)
                        );
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
            subtitle={
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.subtitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u56fd\u6307\u5b9a \u75be\u75c5\u756a\u53f7: 123";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
            title={
              <React.Fragment>
                {(() => {
                  try {
                    return currentItem.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Loading...";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            }
          />
        );
      })}
      <div className={classNames(projectcss.all, sty.freeBox__vW84)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bm2GF
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "\u308a\u60a3\u4e2d\u306e\u75be\u75c5\u540d\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__tsah7)}>
          <div
            data-plasmic-name={"inputArea"}
            data-plasmic-override={overrides.inputArea}
            className={classNames(projectcss.all, sty.inputArea)}
          />

          <Button
            data-plasmic-name={"add"}
            data-plasmic-override={overrides.add}
            className={classNames("__wab_instance", sty.add)}
            color={"softBlue"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6SIOn)}
            >
              <Add24DpFill0Wght400Grad0Opsz24SvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xkVq
                )}
              >
                {"\u8ffd\u52a0"}
              </div>
            </Stack__>
          </Button>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pickerItem", "inputArea", "add", "svg"],
  pickerItem: ["pickerItem"],
  inputArea: ["inputArea"],
  add: ["add", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pickerItem: typeof PickerItem;
  inputArea: "div";
  add: typeof Button;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPicker__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPicker__VariantsArgs;
    args?: PlasmicPicker__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPicker__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPicker__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPicker__ArgProps,
          internalVariantPropNames: PlasmicPicker__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPicker__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPicker";
  } else {
    func.displayName = `PlasmicPicker.${nodeName}`;
  }
  return func;
}

export const PlasmicPicker = Object.assign(
  // Top-level PlasmicPicker renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pickerItem: makeNodeComponent("pickerItem"),
    inputArea: makeNodeComponent("inputArea"),
    add: makeNodeComponent("add"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicPicker
    internalVariantProps: PlasmicPicker__VariantProps,
    internalArgProps: PlasmicPicker__ArgProps
  }
);

export default PlasmicPicker;
/* prettier-ignore-end */
