// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3JWqxZzoKRrJsc2DDFbDv6
// Component: Eset4ZMH0hOX

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import ListItem from "../../ListItem"; // plasmic-import: Y5KeU1iBP0Qv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: 3JWqxZzoKRrJsc2DDFbDv6/projectcss
import sty from "./PlasmicReqFmListItem.module.css"; // plasmic-import: Eset4ZMH0hOX/css

import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: 47BG9Q3TerEV/icon
import StopSvgrepoComSvgIcon from "./icons/PlasmicIcon__StopSvgrepoComSvg"; // plasmic-import: 6iL-6HAtl-Rc/icon
import ArrowRightSvgrepoComSvgIcon from "./icons/PlasmicIcon__ArrowRightSvgrepoComSvg"; // plasmic-import: 4dmxdv8xdidv/icon
import ShareSvgrepoComSvgIcon from "./icons/PlasmicIcon__ShareSvgrepoComSvg"; // plasmic-import: BUxAQ_7ZLTxO/icon

createPlasmicElementProxy;

export type PlasmicReqFmListItem__VariantMembers = {};
export type PlasmicReqFmListItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicReqFmListItem__VariantsArgs;
export const PlasmicReqFmListItem__VariantProps = new Array<VariantPropType>();

export type PlasmicReqFmListItem__ArgsType = { family?: any };
type ArgPropType = keyof PlasmicReqFmListItem__ArgsType;
export const PlasmicReqFmListItem__ArgProps = new Array<ArgPropType>("family");

export type PlasmicReqFmListItem__OverridesType = {
  root?: Flex__<typeof ListItem>;
  freeBox?: Flex__<"div">;
  complete?: Flex__<"div">;
  notApplicable?: Flex__<"div">;
  unsubmittedLocally?: Flex__<"div">;
  unsubmittedRemotely?: Flex__<"div">;
};

export interface DefaultReqFmListItemProps {
  family?: any;
  className?: string;
}

const $$ = {};

function PlasmicReqFmListItem__RenderFunc(props: {
  variants: PlasmicReqFmListItem__VariantsArgs;
  args: PlasmicReqFmListItem__ArgsType;
  overrides: PlasmicReqFmListItem__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <ListItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      endIcon={
        <React.Fragment>
          {(() => {
            try {
              return $props.family.submissionStatus === "complete";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"complete"}
              data-plasmic-override={overrides.complete}
              className={classNames(projectcss.all, sty.complete)}
            >
              <CheckSvgIcon
                className={classNames(projectcss.all, sty.svg___2924U)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___763U
                )}
              >
                {"\u63d0\u51fa\u6e08\u307f"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $props.family.submissionStatus === "notApplicable";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"notApplicable"}
              data-plasmic-override={overrides.notApplicable}
              className={classNames(projectcss.all, sty.notApplicable)}
            >
              <StopSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__mruc2)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mhNjw
                )}
              >
                {"\u63d0\u51fa\u4e0d\u8981"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $props.family.submissionStatus === "unsubmitted" &&
                $props.family.livesTogether
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"unsubmittedLocally"}
              data-plasmic-override={overrides.unsubmittedLocally}
              className={classNames(projectcss.all, sty.unsubmittedLocally)}
            >
              <ArrowRightSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__txGxb)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__saogn
                )}
              >
                {"\u63d0\u51fa\u3059\u308b"}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return (
                $props.family.submissionStatus === "unsubmitted" &&
                !$props.family.livesTogether
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              data-plasmic-name={"unsubmittedRemotely"}
              data-plasmic-override={overrides.unsubmittedRemotely}
              className={classNames(projectcss.all, sty.unsubmittedRemotely)}
            >
              <ShareSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg___3VPz7)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__lq5ZB
                )}
              >
                {"\u30ea\u30f3\u30af\u8868\u793a"}
              </div>
            </div>
          ) : null}
        </React.Fragment>
      }
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___9FSan
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.family.name;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        {(() => {
          try {
            return $props.family.submissionRequired;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__ezm1A
            )}
          >
            {"\u63d0\u51fa\u5bfe\u8c61"}
          </div>
        ) : null}
        {(() => {
          try {
            return !$props.family.submissionRequired;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__sxtXa
            )}
          >
            {"\u63d0\u51fa\u4e0d\u8981"}
          </div>
        ) : null}
      </Stack__>
    </ListItem>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "complete",
    "notApplicable",
    "unsubmittedLocally",
    "unsubmittedRemotely"
  ],
  freeBox: ["freeBox"],
  complete: ["complete"],
  notApplicable: ["notApplicable"],
  unsubmittedLocally: ["unsubmittedLocally"],
  unsubmittedRemotely: ["unsubmittedRemotely"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: typeof ListItem;
  freeBox: "div";
  complete: "div";
  notApplicable: "div";
  unsubmittedLocally: "div";
  unsubmittedRemotely: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReqFmListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReqFmListItem__VariantsArgs;
    args?: PlasmicReqFmListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReqFmListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReqFmListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReqFmListItem__ArgProps,
          internalVariantPropNames: PlasmicReqFmListItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReqFmListItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReqFmListItem";
  } else {
    func.displayName = `PlasmicReqFmListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicReqFmListItem = Object.assign(
  // Top-level PlasmicReqFmListItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    complete: makeNodeComponent("complete"),
    notApplicable: makeNodeComponent("notApplicable"),
    unsubmittedLocally: makeNodeComponent("unsubmittedLocally"),
    unsubmittedRemotely: makeNodeComponent("unsubmittedRemotely"),

    // Metadata about props expected for PlasmicReqFmListItem
    internalVariantProps: PlasmicReqFmListItem__VariantProps,
    internalArgProps: PlasmicReqFmListItem__ArgProps
  }
);

export default PlasmicReqFmListItem;
/* prettier-ignore-end */
